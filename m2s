#!/bin/bash

usage() {
cat <<EOM
USAGE
  m2s [--user] [--public] [--local]

OPTIONS
  --user
    streaming user timeline
  --public
    streaming public timeline
  --local
    streaming (public) local timeline
EOM
  exit
}

check-requirements() {
  for r in curl jq; do
    if ! which $r >/dev/null 2>&1; then
      echo "install $r"
      exit 1
    fi
  done
}

if [ ! -f config.sh ]; then
  echo "Not found config.sh; Please see README.md"
  exit 1
fi

SERVER=
USER_TOKEN=
SLACK_CHANNEL=
SLACK_WEB_HOOK=
source config.sh

check-config() {
  if [ -z "$SERVER" -o -z "$USER_TOKEN" -o -z "$SLACK_CHANNEL" -o -z "$SLACK_WEB_HOOK" ]; then
    echo "Invalid config.sh; missing some values"
    exit 1
  fi
}

check-request() {
  if ! curl -s "${SERVER}" >/dev/null ; then
    echo "Could not request to ${SERVER}"
    exit 1
  fi
}

stream-from() {
  URL="${SERVER}$1"
  curl -sLN -XGET -H "Authorization: Bearer ${USER_TOKEN}" "$URL" 2>&1
  echo
}

post-slack() {
  tmp=$(mktemp)
  cat >"$tmp"
  curl -X POST --data @${tmp} "$SLACK_WEB_HOOK"
  rm "$tmp"
}

html-text-trim() {
  cat |
    sed 's/<br[^>]*>/\\n/g' |
    sed 's,</p><p>,\\n,g' |
    sed 's/<[^>]*>//g' |
    html-encode -d |
    sed 's/"/\\"/g'
}

do_update() {
  data="$1"
  username=$(echo "$data" | jq -r .account.acct)
  display_name=$(echo "$data" | jq -r .account.display_name)
  avatar=$(echo "$data" | jq -r .account.avatar)
  text=$(echo "$data" | jq -r .content | html-text-trim)
  spoiler=$(echo "$data" | jq -r .spoiler_text | html-text-trim)

  if [ ! -z "$spoiler" ]; then
    text="$spoiler\\n:bangbang: $text"
  fi

  # attach images
  append=$(
    echo "$data" |
      jq -r '.media_attachments | map("\\n:heavy_plus_sign: \(if .text_url != null then .text_url else .remote_url end)") | join("")')
  if [ ! -z "$append" ]; then
    text="$text $append"
  fi

  cat <<EOM
{
  "channel": "$SLACK_CHANNEL",
  "icon_url": "$avatar",
  "username": "$display_name @$username",
  "text": "$text"
}
EOM
}

do_notification() {
  data="$1"
  type=$(echo "$data" | jq -r ".type")

  if [ "$type" == "favourite" ]; then

    username=$(echo "$data" | jq -r .account.acct)
    avatar=$(echo "$data" | jq -r .account.avatar)
    text=$(echo "$data" | jq -r .status.content | html-text-trim)

    cat <<EOM
{
  "channel": "$SLACK_CHANNEL",
  "icon_url": "$avatar",
  "username": "$username",
  "text": ":star: $text"
}
EOM

  elif [ "$type" == "follow" ]; then

    username=$(echo "$data" | jq -r .account.acct)
    avatar=$(echo "$data" | jq -r .account.avatar)

    cat <<EOM
{
  "channel": "$SLACK_CHANNEL",
  "icon_url": "$avatar",
  "username": "$username",
  "text": ":exclamation: follows you"
}
EOM

  else

    echo "[*do_notification] $data"

  fi

}

do_slack() {
  while read -r line; do
    if [ -z "$line" ]; then
      continue
    fi
    case "$line" in
      :thump )
        echo "heartbeat"
        ;;
      "event: update" )
        read -r line
        data=${line#data: }
        do_update "$data"
        do_update "$data" | post-slack
        ;;
      "event: notification" )
        read -r line
        data=${line#data: }
        do_notification "$data"
        do_notification "$data" | post-slack
        ;;
      * )
        echo "[*] $line"
    esac
  done
}

report-hash() {
text=$(git rev-parse HEAD)
  cat <<EOM | post-slack
{
  "channel": "$SLACK_CHANNEL",
  "icon_emoji": ":information_source:",
  "username": "info",
  "text": "$text"
}
EOM
}

main() {
  while :; do
    echo "[=] start"
    stream-from "$1" | do_slack
    echo "[=] stream stopped"
  done
}

check-requirements
check-config
check-request
report-hash

if [ $# -gt 0 ]; then
  case "$1" in
    --help | -h )
      usage
      ;;
    --user )
      main "/api/v1/streaming/user" | do_slack
      ;;
    --public )
      main "/api/v1/streaming/public" | do_slack
      ;;
    --local )
      main "/api/v1/streaming/public/local" | do_slack
      ;;
    * )
      usage
      ;;
  esac
fi

usage

# vim: set tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
